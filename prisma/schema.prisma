// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String
  role               Role                @default(USER)
  passwordResetToken passwordResetToken?
  questions          questionEvent[]
  profilePic         ProfilePic?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@fulltext([name, email])
  @@map("users")
}

model passwordResetToken {
  id     Int    @id @default(autoincrement())
  title  String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model Topic {
  id        Int        @id @default(autoincrement())
  title     String
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("topics")
}

model Question {
  id        Int             @id @default(autoincrement())
  title     String
  topicId   Int
  topic     Topic           @relation(fields: [topicId], references: [id])
  users     questionEvent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("questions")
}

model questionEvent {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  questionId   Int
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topicId      Int
  note         String
  isBookmarked Boolean  @default(false)
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("questions_events")
}

model ProfilePic {
  id       String @id
  path     String
  filename String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])

  @@map("profile_pics")
}
